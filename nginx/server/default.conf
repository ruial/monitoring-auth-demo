server {
    server_name auth2.localhost.pomerium.io;
    listen 80;
    return 301 https://$server_name$request_uri;
}

server {
    server_name auth2.localhost.pomerium.io;
    listen 443 ssl;

    ssl_certificate /config/nginx/_wildcard.localhost.pomerium.io.pem;
    ssl_certificate_key /config/nginx/_wildcard.localhost.pomerium.io-key.pem;

    location / {
        resolver 127.0.0.11; # docker workaround, dns resolver does not work without this
        set $upstream_authelia http://authelia; # This example assumes a Docker deployment
        proxy_pass $upstream_authelia;
        include /config/nginx/proxy.conf;
    }
}

server {
    server_name httpbin2.localhost.pomerium.io;
    listen 81;
    return 301 https://$server_name:444$request_uri;
}

map $auth_token $var_token {
    default "Nothing";
    ~john "Basic john_token"; # partial match
    ~doe "Basic doe_token";
    #"john.doe@authelia.com" "Basic john_token";
    #"jane.doe@authelia.com" "Basic jane_token";
}

map $http_user_agent $var_ua {
    default $http_user_agent;
    ~^(?<prefix>.*)Gecko(?<suffix>.*)$ "${prefix}Lizard$suffix";
}

server {
    server_name httpbin2.localhost.pomerium.io;
    listen 444 ssl;

    ssl_certificate /config/nginx/_wildcard.localhost.pomerium.io.pem;
    ssl_certificate_key /config/nginx/_wildcard.localhost.pomerium.io-key.pem;

    include /config/nginx/authelia.conf;

    location / {
        resolver 127.0.0.11;
        set $upstream_httpbin http://httpbin;
        proxy_pass $upstream_httpbin;
        include /config/nginx/auth.conf; # Activates Authelia for specified route/location, please ensure you have setup the domain in your configuration.yml
        proxy_set_header Authorization $var_token;
        proxy_set_header Test-UA $var_ua;
        include /config/nginx/proxy.conf; # Reverse proxy configuration
    }
}
